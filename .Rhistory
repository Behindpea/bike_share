install.packages("tidyverse")
install.packages("lubridate")
install.packages("tidyverse")
install.packages("tidyr")
install.packages("dplyr")
install.packages("gglpot2")
library(tidyverse)
install.packages("dplyr")
library(lubridate)
library(tidyr)
library(dplyr)
library(ggplot2)
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
options(repos = c(CRAN = "https://cloud.r-project.org"))
install.packages("tidyverse")
install.packages("tidyverse")
library(readxl)
Divvy_Trips_2019_Q1 <- read_excel("C:/Users/admin/Downloads/Usecase_Bike_share/Divvy_Trips_2019_Q1.csv")
library(readxl)
Divvy_Trips_2019_Q1 <- read_excel("C:/Users/admin/Downloads/Divvy_Trips_2019_Q1.xlsx")
View(Divvy_Trips_2019_Q1)
library(readxl)
Divvy_Trips_2020_Q1 <- read_excel("C:/Users/admin/Downloads/Divvy_Trips_2020_Q1.xlsx")
View(Divvy_Trips_2020_Q1)
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("lubridate")
install.packages("lubridate")
library(tidyverse)
library(lubridate)
install.packages("ggplot2")
install.packages("ggplot2")
library(ggplot2)
q1_2029 <- read_csv("Divvy_Trips_2019_Q1.csv")
q1_2029 <- read_csv("Divvy_Trips_2019_Q1.csv")
q1_2020 <- read_csv("Divvy_Trips_2020_Q1.csv")
q1_2019 <- read_csv("Divvy_Trips_2019_Q1.csv")
colnames(q1_2019)
colnames(q1_2020)
str(q1_2019)
str(q1_2020)
q1_2019 <- q1_2019 %>%
rename(ride_id = trip_id,
rideable_type = bikeid, # This column hold bike type, but is 'bikeid' in q1_2019
started_at = start_time,
ended_at = end_time,
start_station_name = from_station_name,
end_station_name = to_station_name,
start_station_id = from_station_id,
end_station_id = to_station_id,
member_casual = usertype)
all_trips <- bind_rows(q1_2019, q1_2020)
all_trips <- all_trips %>%
select(-c(gender, birthyear, tripduration, start_lat, start_lng, end_lat, end_lng))
q1_2019 <- q1_2019 %>%
mutate(ride_id = as.character(ride_id))
all_trips <- bind_rows(q1_2019, q1_2020)
q1_2019 <- q1_2019 %>%
mutate(ride_id = as.character(ride_id),
rideable_type = as.character(rideable_type),
start_station_id = as.character(start_station_id),
end_station_id = as.character(end_station_id))
all_trips <- bind_rows(q1_2019, q1_2020)
q1_2019 <- q1_2019 %>%
mutate(ride_id = as.character(ride_id),
rideable_type = as.character(rideable_type),
start_station_id = as.character(start_station_id),
end_station_id = as.character(end_station_id))
all_trips <- bind_rows(q1_2019, q1_2020)
q1_2019 <- read_csv("Divvy_Trips_2019_Q1.csv",
col_types = cols(
trip_id = col_character(),
bikeid = col_character(),
from_station_id = col_character(),
to_station_id = col_character()
))
q1_2020 <- read_csv("Divvy_Trips_2020_Q1.csv",
col_types = cols(
ride_id = col_character(),
rideable_type = col_character(),
start_station_id = col_character(),
end_station_id = col_character()
))
q1_2019 <- q1_2019 %>%
rename(ride_id = trip_id,
rideable_type = bikeid, # This column hold bike type, but is 'bikeid' in q1_2019
started_at = start_time,
ended_at = end_time,
start_station_name = from_station_name,
end_station_name = to_station_name,
start_station_id = from_station_id,
end_station_id = to_station_id,
member_casual = usertype)
all_trips <- bind_rows(q1_2019, q1_2020)
q1_2019 <- q1_2019 %>%
mutate(ride_id = as.character(ride_id),
rideable_type = as.character(rideable_type),
start_station_id = as.character(start_station_id),
end_station_id = as.character(end_station_id))
q1_2020 <- q1_2020 %>%
mutate(ride_id = as.character(ride_id),
rideable_type = as.character(rideable_type),
start_station_id = as.character(start_station_id),
end_station_id = as.character(end_station_id))
all_trips <- bind_rows(q1_2019, q1_2020)
all_trips <- all_trips %>%
select(-c(gender, birthyear, tripduration, start_lat, start_lng, end_lat, end_lng))
View(all_trips)
all_trips <- all_trips %>%
mutate(member_casual = recode(member_casual,
"Subcriber" = "member",
"Customer" = "casual"))
View(all_trips)
all_trips <- all_trips %>%
mutate(started_at = ymd_hms(started_at),
ended_at = ymd_hms(ended_at),
ride_length = difftime(ended_at, started_at, units = "secs"))
View(all_trips)
all_trips <- all_trips %>%
mutate(date = as.Date(started_at),
month = month(started_at, label = TRUE),
day_of_week = wday(started_at, lable = TRUE, abbr = FALSE),
year = year(started_at),
hour = hour(started_at))
### 3.2.5. Create date/time components for analysis
all_trips <- all_trips %>%
mutate(date = as.Date(started_at),
month = month(started_at, label = TRUE),
day_of_week = wday(started_at, label = TRUE, abbr = FALSE),
year = year(started_at),
hour = hour(started_at))
View(all_trips)
all_trips_v2 <- all_trips %>%
filter(right_length > 60 & right_length < 86400) #Filter for rides between 60s and 24 hours
all_trips_v2 <- all_trips %>%
filter(ride_length > 60 & ride_length < 86400) #Filter for rides between 60s and 24 hours
all_trips_v2 <- na.omit(all_trips_v2)
all_trips_v2 %>%
group_by(member_casual) %>%
summarise(
total_rides = n(),
average_length_min = mean(ride_length)/60
)
all_trips <- all_trips %>%
mutate(member_casual = recode(member_casual,
"Subscriber" = "member",
"Customer" = "casual"))
all_trips <- all_trips %>%
mutate(started_at = ymd_hms(started_at),
ended_at = ymd_hms(ended_at),
ride_length = difftime(ended_at, started_at, units = "secs"))
all_trips <- all_trips %>%
mutate(date = as.Date(started_at),
month = month(started_at, label = TRUE),
day_of_week = wday(started_at, label = TRUE, abbr = FALSE),
year = year(started_at),
hour = hour(started_at))
all_trips_v2 <- all_trips %>%
filter(ride_length > 60 & ride_length < 86400) #Filter for rides between 60s and 24 hours
all_trips_v2 <- na.omit(all_trips_v2)
all_trips_v2 %>%
group_by(member_casual) %>%
summarise(
total_rides = n(),
average_length_min = mean(ride_length)/60
)
all_trips_v2 %>%
group_by(member_casual, day_of_week) %>%
summarise(
number_of_rides = n(),
average_duration = mean(ride_length)
) %>%
arrange(member_casual, day_of_week)
View(q1_2020)
View(all_trips_v2)
all_trips_v2 %>%
group_by(member_casual, month) %>%
summarize(
number_of_rides = n(),
average_duration = mean(ride_length)
) %>%
arrange(member_casual, month)
all_trips_v2 %>%
group_by(member_casual, start_station_name) %>%
summarise(ride_count = n()) %>%
arrange(member_casual, desc(ride_count)) %>%
slice(1:10)
all_trips_v2 %>%
group_by(member_casual, day_of_week) %>%
summarize(number_of_rides = n(), .groups = 'drop') %>%
ggplot(aes(x=day_of_week, y=number_of_rides, fill=member_casual)) +
geom_col(position = "dodge") +
labs( title = "Total rides by day_of_week and rider type",
x = "Day of the week",
y = "Number of rides",
fill = "Rider Type") +
scale_y_continuous(labels = scales::comma)
all_trips_v2 %>%
group_by(member_casual, day_of_week) %>%
summarize(number_of_rides = n(), .groups = 'drop') %>%
ggplot(aes(x=day_of_week, y=number_of_rides, fill=member_casual, angle = 45)) +
geom_col(position = "dodge") +
labs( title = "Total rides by day of week and rider type",
x = "Day of the week",
y = "Number of rides",
fill = "Rider Type") +
scale_y_continuous(labels = scales::comma)
all_trips_v2 %>%
group_by(member_casual, day_of_week) %>%
summarize(number_of_rides = n(), .groups = 'drop') %>%
ggplot(aes(x=day_of_week, y=number_of_rides, fill=member_casual, angle = 45)) +
geom_col(position = "dodge") +
labs( title = "Total rides by day of week and rider type",
x = "Day of the week",
y = "Number of rides",
fill = "Rider Type") +
scale_y_continuous(labels = scales::comma)
all_trips_v2 %>%
group_by(member_casual, day_of_week) %>%
summarise(average_duration = mean(ride_length)/60, .groups = 'drop') %>%
ggplot(aes(x= day_of_week, y=average_duration, color = member_casual, group =member_casual)) +
geom_line(size = 1) +
geom_point(size = 2) +
labs(title = "Average ride lenghth by day of week",
x="Day of the week",
y="Average ride length (Minutes)",
color = "Rider Type")
all_trips_v2 %>%
group_by(member_casual, day_of_week) %>%
summarise(average_duration = mean(ride_length)/60, .groups = 'drop') %>%
ggplot(aes(x= day_of_week, y=average_duration, color = member_casual, group =member_casual)) +
geom_line(linewidth = 1) +
geom_point(size = 2) +
labs(title = "Average ride lenghth by day of week",
x="Day of the week",
y="Average ride length (Minutes)",
color = "Rider Type")
View(all_trips_v2)
View(all_trips)
View(q1_2019)
